import * as ink from 'https://deno.land/x/ink/mod.ts'

import { show } from '../../utils/show.ts'
import { utils } from '../../utils/utils.ts'
const _show = new show()
const _utils = new utils()

import { websiteDirbrut } from './tools/dirbrut.ts'

export class WebExploit {

    public async init(){
        _show.log('Starting web exploit...')
        await this.main()
    }

    private async main() {
        //show the main menu
        await _show.show_web_exploit_menu()
        let rep = await _utils.listenUserResponse(ink.colorize("[<red>You</red>] your choice"))
        if (rep == "1") {
            _show.log('Finding subdomain...')
            await this.findSubdomain()
        } else if(rep == "2") {
            await this.dirBrut()
        } else if(rep == "@") {
            return
        } else {
            _show.log('Invalid choice')
        }
        await this.main()
    }

    //private part
    private async findSubdomain() {
        let maindomain = await _utils.listenUserResponse(ink.colorize("[<red>You</red>] enter the domain"))
        let regex = /[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})/g
        if (maindomain.match(regex)) {
            _show.log(`Searching subdomain of ${maindomain}`)
            let t = await (await import('./tools/findSub.ts')).findSubdomain(maindomain)
            console.table(t)
            _show.log(`Found ${t.length} subdomain`)
            _show.log('Do you want to practice hardcore finder ? (y/N)')
            let rep = await _utils.listenUserResponse(ink.colorize("[<red>You</red>] your choice"))
            if (rep.toLowerCase() == "y" || rep.toLowerCase() == "yes") {
                await this.findSubdomain_avanced(maindomain)
            }
        } else {
            _show.log('Invalid domain format')
            return await this.findSubdomain()
        }
    }

    private async findSubdomain_avanced(domain) {
        let list = []
        try {
            list = (Deno.readTextFileSync('./tools/web_exploit/data/subdomain.txt')).split('\n')
        } catch(err){
            _show.log('Invalid file, downloading database')
            try{
                let req = await fetch('https://sn0walice.github.io/Never-Be-Late/Web/sub_full.txt')
                let text = await req.text()
                Deno.writeTextFileSync('./tools/web_exploit/data/subdomain.txt', text)
                list = text.split('\n')
            } catch(err){
                Deno.exit(1)
            }
        }
        //order list via size and alphabet
        list.sort((a, b) => {
            if (a.length > b.length) return 1
            if (a.length < b.length) return -1
            if (a > b) return 1
            if (a < b) return -1
            return 0
        })
        _show.log(`Searching subdomain of ${domain} with ${list.length} subdomain`)
        _show.log(`This can take a while, go and have a smothie ðŸ¥¤`)
        _show.log(`Do not forget to stars ${ink.colorize("<yellow>Alina</yellow>")} on github https://github.com/Sn0wAlice/Alina âœ¨`)
        await new Promise(resolve => setTimeout(resolve, 5000))
        let res = await (await import('./tools/findSub.ts')).findSubdomain_avanced(domain, list)
        let filename = `./db/subdomain/${domain}_${Date.now()}.txt`
        Deno.mkdirSync('./db/subdomain', { recursive: true })
        _show.log(`Found ${res.length} subdomain, saving in ${filename}`)
        Deno.writeTextFileSync(filename, res.join('\n'))
    }

    private async dirBrut() {
        let url = await _utils.listenUserResponse(ink.colorize("[<red>You</red>] enter the url"))
        if(!url.includes('http://') && !url.includes('https://')) {
            url = 'http://' + url
        }
        //ask for the wordlist
        let wordlist = await _utils.listenUserResponse(ink.colorize("[<red>You</red>] enter the wordlist (empty for default)"))
        if (wordlist == "") {
            wordlist = './tools/web_exploit/data/dir_brut_wordlist.txt'
        }
        let w = []
        try{
            let tmp = Deno.readTextFileSync(wordlist)
            w = tmp.split('\n')
        } catch(err){
            _show.log('Invalid wordlist')
            return await this.dirBrut()
        }

        //start the dir brut
        await new websiteDirbrut().init(url, w)
    }
}