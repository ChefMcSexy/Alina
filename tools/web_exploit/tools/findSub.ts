import * as ink from 'https://deno.land/x/ink/mod.ts'
import ProgressBar from "https://deno.land/x/progress@v1.2.7/mod.ts";

import { show } from '../../../utils/show.ts'
const _show = new show()


export async function findSubdomain(domain:string){
    let rep = await getDomainViaSSL(domain)

    for(let i = 0; i < rep.length; i++){
        rep[i].seen = rep[i].seen.sort().reverse()[0]
    }

    return rep
}


/**
 * 
 * Exploit https://crt.sh for subdomain
 * {
 *      "issuer_ca_id": 123456,
 *      "issuer_name":"...",
 *      "common_name":"...",
 *      "name_value":"...",
 *      "id":123456789,
 *      "entry_timestamp":"2022-03-17T00:00:00Z",
 *      "not_before":"022-03-17T00:00:00Z",
 *      "not_after":"022-03-17T00:00:00Z",
 *      "serial_number":"..."
 * }
 */
async function getDomainViaSSL(domain:string) {
    let rep:any[] = []
    try {
        let req = await fetch(`https://crt.sh/?q=${domain}&output=json`)
        let response = await req.json()
        for(let i = 0; i < response.length; i++){
            let allD = response[i].name_value.split('\n')
            for(let j = 0; j < allD.length; j++){
                let t = rep.find(x => x.domain == allD[j])
                if(!t){
                    rep.push({
                        domain: allD[j],
                        seen: [response[i].entry_timestamp]
                    })
                } else {
                    t.seen.push(response[i].entry_timestamp)
                }
            }
        }
    } catch (error) {
        _show.log("Error: domain not found or invalid")
    }
    
    return rep
}


export async function findSubdomain_avanced(domain:string, list:string[]) {
    let d:string[] = []

    const title = ""
    const total = list.length
    const progress = new ProgressBar({
        title,
        total,
        display: '[:percent] :bar :completed :title',
    });

    let completed = 0

    for(let i = 0; i < list.length; i++){
        let url = `https://${list[i]}.${domain}`
        let k = await makeRequest(url)
        if(k) {
            d.push(list[i])
        }
        progress.render(completed++, {
            title: `${ink.colorize("<blue>"+list[i]+"</blue>")}`
        });
    }
    return d
}

async function makeRequest(url:string) {
    try {
        let req = await fetch(url)
        //_show.log(`${url} is ${ink.colorize("<green>online</green>")} with status ${ink.colorize("<blue>"+req.status+"</blue>")}`)
        return true
    } catch(err){
        //_show.log(`${url} is ${ink.colorize("<red>offline</red>")}`)
    }
    return false
}